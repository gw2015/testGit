git命令：

辅助参数 -f 强制   -d 删除  -D 强制删除 -a 所有

1.产生一个git项目
初始化一个git项目，命令：git init
会在当前目录下生成一个.git文件夹，使当前目录变为一个git仓库（每个git项目都有.git文件夹）；
拉取一个git项目，命令：git clone "$PROJECT_URL"
会拉取远程服务器的项目到本地，项目里带有.git文件夹，可能需要权限。


2.配置用户信息
配置全局用户名和邮箱：
git config --global user.name "$MY_NAME"
git config --global user.email "$MY_EMAIL"
查询配置：git config --list
配置单个项目用户名和邮箱：
进入项目目录下,命令：
git config user.name "$MY_NAME"
git config user.name "$MY_EMAIL"

3.使用ssh登录，免除每次都需要输入密码的操作
生成公钥和私钥
ssh -keygen
要输入存储的文件全路径，不带扩展名。
输入密码，可以跳过
cat MY_查看公钥
给用户添加公钥

4.与远程仓库建立关系
git remote ；查看所有远程仓库别称
git remote -v ；查看所有远程仓库详情地址
git remote add 别称 地址；添加一个远程仓库
git remote remove 别称；删除一个远程仓库

5.拉取远程分支到本地
git fetch 远程仓库别称 远程分支名：本地分支名  ；如果本地分支不存在，则创建一个。
git fetch 远程仓库别称   ；默认拉取master分支更新变化
此时可用 git log -p FETCH_HEAD 查看远程分支变化

6.比较
分支和分支比较
git diff 分支名 文件名；当前分支对比比较分支的变化。
同一个分支比较
缓存区stage和工作区比较
git diff 文件名
缓存区stage和版本库比较
git diff --cached 文件名
工作区和版本库比较
git diff HEAD 文件名
与某次提交做对比
git diff 某次提交的ID 文件名

7.覆盖
分支和分支合并
git merge 分支名；和当前分支合并，可能会产生冲突
删除暂存区文件，不影响工作区
git rm --cached 文件名
用暂存区文件，覆盖工作区文件
git checkout 文件名；
用版本库文件覆盖工作区文件
git checkout 节点sha 文件名；

8.提交
工作区修改提交到暂存区
git add 文件名；
暂存区提交到版本库
git commit 文件名 -m 描述信息；
修改描述信息
git commit --amend -m 描述信息；
版本库提交到远程仓库
git push


9.节点--git以每次的commit为一个节点，每个节点会有一个串码标识
查看某分支的版本库所有提交
git log 分支名（远程分支要加远程库别称）
查看某分支工作区和暂存区的所有变化
git reflog 分支名（远程分支要加远程库别称）

切换节点
git reset --hard HEAD^ ；HEAD表示当前指针位置，^表示上一个版本，多一个^就往前推一个版本
git reset --hard HEAD~3；复数
git reset --hard 节点串码；回退到某个版本


、、、、、、、、、、、、、、、、、、




